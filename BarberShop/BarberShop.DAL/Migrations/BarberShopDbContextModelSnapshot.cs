// <auto-generated />
using System;
using BarberShop.DAL.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BarberShop.DAL.Migrations
{
    [DbContext(typeof(BarberShopDbContext))]
    partial class BarberShopDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BarberShop.DAL.Entities.Barber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Position")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Barbers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "I like to communicate with customers",
                            Experience = 1,
                            ImageId = 19,
                            Name = "Bob",
                            Position = "Barber",
                            Rate = 4.5
                        },
                        new
                        {
                            Id = 2,
                            Description = "I like to communicate with customers",
                            Experience = 3,
                            ImageId = 20,
                            Name = "David",
                            Position = "Barber",
                            Rate = 3.5
                        },
                        new
                        {
                            Id = 3,
                            Description = "I like to communicate with customers",
                            Experience = 5,
                            ImageId = 18,
                            Name = "Tom",
                            Position = "Barber",
                            Rate = 5.0
                        });
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "haircut using hair clipper and scissors",
                            ImageId = 1,
                            Name = "classic haircut"
                        },
                        new
                        {
                            Id = 2,
                            Description = "combing, cutting mustaches and beards",
                            ImageId = 2,
                            Name = "mustache and beard trim"
                        },
                        new
                        {
                            Id = 3,
                            Description = "washing and styling your hair, mostache or beard",
                            ImageId = 3,
                            Name = "hair washing and styling"
                        },
                        new
                        {
                            Id = 4,
                            Description = "classic haircut using hair clipper and scissors for children",
                            ImageId = 4,
                            Name = "children's haircut"
                        },
                        new
                        {
                            Id = 5,
                            Description = "painting the beard, hair or mustache borders",
                            ImageId = 5,
                            Name = "camouflage hair, beard and mustache"
                        });
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alt")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("images", "media");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Title = "classic haircut",
                            Url = "./images/classic_haircut.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Title = "mustache and beard trim",
                            Url = "./images/beard_mustache.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Title = "hair washing and styling",
                            Url = "./images/styling.jpg"
                        },
                        new
                        {
                            Id = 4,
                            Title = "children's haircut",
                            Url = "../images/child_haircut.jpg"
                        },
                        new
                        {
                            Id = 5,
                            Title = "camouflage hair",
                            Url = "./images/camouflage.jpg"
                        },
                        new
                        {
                            Id = 6,
                            Title = "french crop",
                            Url = "../images/french_crop.jpg"
                        },
                        new
                        {
                            Id = 7,
                            Title = "slick back",
                            Url = "../images/slick_back.jpg"
                        },
                        new
                        {
                            Id = 8,
                            Title = "side part",
                            Url = "../images/side_part.jpg"
                        },
                        new
                        {
                            Id = 9,
                            Title = "circle beard",
                            Url = "../images/circle_beard.jpg"
                        },
                        new
                        {
                            Id = 10,
                            Title = "royale beard",
                            Url = "../images/royale_beard.jpg"
                        },
                        new
                        {
                            Id = 11,
                            Title = "styling hair",
                            Url = "../images/styling_hair.jpg"
                        },
                        new
                        {
                            Id = 12,
                            Title = "hair washing",
                            Url = "../images/hair_washing.jpg"
                        },
                        new
                        {
                            Id = 13,
                            Title = "tapered sides with side swept fringe",
                            Url = "../images/Tapered-Sides-with-Side-Swept-Fringe.jpg"
                        },
                        new
                        {
                            Id = 14,
                            Title = "high fade with hard side part",
                            Url = "../images/High-Fade-with-Hard-Side-Part.jpg"
                        },
                        new
                        {
                            Id = 15,
                            Title = "camouflage hair",
                            Url = "../images/Camouflage-Hair-men.jpg"
                        },
                        new
                        {
                            Id = 16,
                            Title = "camouflage beard",
                            Url = "../images/men-hair-styles-beard-styles.jpg"
                        },
                        new
                        {
                            Id = 17,
                            Title = "camouflage beard",
                            Url = "./images/camouflage.jpg"
                        },
                        new
                        {
                            Id = 18,
                            Title = "barber tom",
                            Url = "./images/barber_tom.jpg"
                        },
                        new
                        {
                            Id = 19,
                            Title = "barber bob",
                            Url = "./images/barber_bob.jpg"
                        },
                        new
                        {
                            Id = 20,
                            Title = "barber david",
                            Url = "./images/barber_david.jpg"
                        });
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BarberId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BarberId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BarberId = 1,
                            ServiceId = 9,
                            UserId = 1,
                            date = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            time = new TimeSpan(0, 10, 30, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            BarberId = 1,
                            ServiceId = 4,
                            UserId = 1,
                            date = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            time = new TimeSpan(0, 11, 30, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            BarberId = 1,
                            ServiceId = 1,
                            UserId = 1,
                            date = new DateTime(2023, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            time = new TimeSpan(0, 12, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("TimeToMake")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ImageId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "The French Crop is classically famous because it is so simple. ",
                            ImageId = 6,
                            Name = "french crop",
                            Price = 100,
                            TimeToMake = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "The slick back is a stylish hairstyle for men who want a cool and sleek look.",
                            ImageId = 7,
                            Name = "slick back",
                            Price = 90,
                            TimeToMake = new TimeSpan(0, 0, 50, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Whether it is the side parts of the Twenties, Forties, Sixties.",
                            ImageId = 8,
                            Name = "side part",
                            Price = 110,
                            TimeToMake = new TimeSpan(0, 1, 10, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "A chin patch and a mustache that forms a circle.",
                            ImageId = 9,
                            Name = "circle beard",
                            Price = 60,
                            TimeToMake = new TimeSpan(0, 0, 30, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "A mustache anchored by a chin strip.",
                            ImageId = 10,
                            Name = "royale beard",
                            Price = 65,
                            TimeToMake = new TimeSpan(0, 0, 35, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "Use any style with your hair.",
                            ImageId = 11,
                            Name = "styling hair",
                            Price = 6,
                            TimeToMake = new TimeSpan(0, 0, 5, 0, 0)
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 3,
                            Description = "Usual hair washing.",
                            ImageId = 12,
                            Name = "hair washing",
                            Price = 5,
                            TimeToMake = new TimeSpan(0, 0, 5, 0, 0)
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            Description = "Tapered sides are great for kids haircuts if you don’t want a very short fade. ",
                            ImageId = 13,
                            Name = "tapered sides",
                            Price = 75,
                            TimeToMake = new TimeSpan(0, 0, 55, 0, 0)
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Description = "Boys fade haircuts keep the sides clean, short and simple, while a hard side part adds a classy yet cool hairstyle on top.",
                            ImageId = 14,
                            Name = "high fade with hard side part",
                            Price = 85,
                            TimeToMake = new TimeSpan(0, 1, 0, 0, 0)
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Description = "Hide your bald.",
                            ImageId = 15,
                            Name = "camouflage hair",
                            Price = 90,
                            TimeToMake = new TimeSpan(0, 0, 20, 0, 0)
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 5,
                            Description = "Make a great boards for your beard.",
                            ImageId = 16,
                            Name = "camouflage beard",
                            Price = 60,
                            TimeToMake = new TimeSpan(0, 0, 10, 0, 0)
                        });
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "average user"
                        });
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("statusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("statusId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "bob@gmail.com",
                            Name = "Bob",
                            Password = "bob",
                            Surname = "Bob",
                            Username = "Bob",
                            statusId = 1
                        });
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Barber", b =>
                {
                    b.HasOne("BarberShop.DAL.Entities.Image", "Image")
                        .WithMany("BarberImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Category", b =>
                {
                    b.HasOne("BarberShop.DAL.Entities.Image", "Image")
                        .WithMany("CategoryImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Order", b =>
                {
                    b.HasOne("BarberShop.DAL.Entities.Barber", "Barber")
                        .WithMany("OrederBarber")
                        .HasForeignKey("BarberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberShop.DAL.Entities.Service", "Service")
                        .WithMany("ServiceOrder")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BarberShop.DAL.Entities.User", "User")
                        .WithMany("UserOrder")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barber");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Service", b =>
                {
                    b.HasOne("BarberShop.DAL.Entities.Category", "Category")
                        .WithMany("CategoryServices")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BarberShop.DAL.Entities.Image", "Image")
                        .WithMany("ServiceImages")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.User", b =>
                {
                    b.HasOne("BarberShop.DAL.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("statusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Barber", b =>
                {
                    b.Navigation("OrederBarber");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Category", b =>
                {
                    b.Navigation("CategoryServices");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Image", b =>
                {
                    b.Navigation("BarberImages");

                    b.Navigation("CategoryImages");

                    b.Navigation("ServiceImages");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.Service", b =>
                {
                    b.Navigation("ServiceOrder");
                });

            modelBuilder.Entity("BarberShop.DAL.Entities.User", b =>
                {
                    b.Navigation("UserOrder");
                });
#pragma warning restore 612, 618
        }
    }
}
